package joao.alarcon.tests.kabum.analytics.bo;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.stereotype.Component;

@Component
public class VisualAnalyticsBO 
{
	private static final String fileLocation = "src/main/resources/dataAnalytics/ecommerceSales.xls";
	
	private static final String CLASS_NAME_LOG = "[VisualAnalyticsBO] ";
	
	private List<Integer> disregardLines = List.of(0, 1, 2, 4);
	private static List<String> years = new ArrayList<String>();
	private static List<String> merchandiseLineNames = new ArrayList<String>();
	private static List<String> columnsTotal = new ArrayList<String>();
	private static List<String> columnsEcommerce = new ArrayList<String>();
	
	public void readXLSData()
	{
		try 
		{
			FileInputStream fileInputStream = new FileInputStream(new File(fileLocation));
			
			try(HSSFWorkbook workBook = new HSSFWorkbook(fileInputStream))
			{
				HSSFSheet sheet = workBook.getSheetAt(0);
				Integer iteratorLine = Integer.valueOf(0);
				Integer iteratorColumn = Integer.valueOf(0);
				
				for(Row row : sheet)
				{
					iteratorLine = Integer.valueOf(row.getRowNum());
					//System.out.println(CLASS_NAME_LOG + "Actual Line: " + iteratorLine);
					
					if(!disregardLines.contains(iteratorLine))
					{
						for(Cell cell : row)
						{
							iteratorColumn = Integer.valueOf(cell.getColumnIndex());
							//System.out.println(CLASS_NAME_LOG + "Actual Column: " + iteratorColumn);
							
							switch(cell.getCellType())
							{
								case STRING:
									String textCellValue = cell.getRichStringCellValue().getString();
									//System.out.println(CLASS_NAME_LOG + "Text Cell Value: " + textCellValue);
									
									fillListOfMerchandiseLineNamesAfterValidation(iteratorLine, iteratorColumn, textCellValue);
									
									fillListOfYearAfterValidation(iteratorLine, iteratorColumn, textCellValue);
									
									fillListOfColumnsAfterValidations(iteratorLine, iteratorColumn, textCellValue);
									
									break;
								case NUMERIC:
									String numericCellValue = cell.getNumericCellValue() + "";
									//System.out.println(CLASS_NAME_LOG + "Numeric Cell Value: " + numericCellValue);
									
									fillListOfYearAfterValidation(iteratorLine, iteratorColumn, numericCellValue);
									
									fillListOfColumnsAfterValidations(iteratorLine, iteratorColumn, numericCellValue);
									
									break;
								default:
									break;
							}
							
							
						}
						
						if(isEndOfLineContent(iteratorLine))
						{
							break;
						}
					}
				}
				
				//Populate Sales Class and MerchandiseLine Class
				VisualAnalyticsUtils.createListOfMerchandiseLine(merchandiseLineNames, columnsTotal, columnsEcommerce);
				
			}
		} 
		catch (FileNotFoundException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	private void fillListOfMerchandiseLineNamesAfterValidation(Integer iteratorLine, Integer iteratorColumn, String cellValue)
	{
		if(VisualAnalyticsUtils.columnIsMerchandiseLineName(iteratorLine, iteratorColumn))
		{
			merchandiseLineNames.add(cellValue);
		}
	}
	
	private void fillListOfYearAfterValidation(Integer iteratorLine, Integer iteratorColumn, String cellValue)
	{
		if(VisualAnalyticsUtils.lineAndColumnIsYear(iteratorLine, iteratorColumn))
		{
			//Line and Column is Year
			VisualAnalyticsUtils.addValueToListOfString(years, cellValue);
		}
	}
	
	private void fillListOfColumnsAfterValidations(Integer iteratorLine, Integer iteratorColumn, String cellValue)
	{
		if(VisualAnalyticsUtils.columnIsMerchandiseLineName(iteratorLine, iteratorColumn))
		{
			return;
		}
		
		if(VisualAnalyticsUtils.lineAndColumnIsYear(iteratorLine, iteratorColumn))
		{
			return;
		}
		
		if(!VisualAnalyticsUtils.containsPercentageCharacter(cellValue))
		{
			if(VisualAnalyticsUtils.columnIsEven(iteratorColumn))
			{
				//Is E-commerce Column
				VisualAnalyticsUtils.addValueToListOfString(columnsEcommerce, cellValue);
			}
			else
			{
				//Is Total Column
				VisualAnalyticsUtils.addValueToListOfString(columnsTotal, cellValue);
			}
		}
	}
	
	private Boolean isEndOfLineContent(Integer iteratorLine)
	{
		if(!(iteratorLine >= 19))
		{
			return Boolean.FALSE;
		}
		
		return Boolean.TRUE;
	}
}
